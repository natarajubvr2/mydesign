<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_492360_mydesign.MydesignECCUtils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description>Mydesign ECC Library</description>
        <mobile_callable>false</mobile_callable>
        <name>MydesignECCUtils</name>
        <sandbox_callable>false</sandbox_callable>
        <script><![CDATA[var MydesignECCUtils = Class.create();
MydesignECCUtils.prototype = {
    initialize: function() {
		this.attempts = gs.getProperty('mydesign.ecc.attempts');
		this.interval = gs.getProperty('mydesign.ecc.wait_interval');
    },
// Execute bash scripts on MID Server
	executeCommandMIDServer: function(midserver, payload, wait_response) {
		
		gs.info('MyDesign - Execute Command MID Server (midserver = ' + midserver + ', wait_response = ' + wait_response + ')');
		
		var gr = new GlideRecord('ecc_queue');
		gr.initialize();
		gr.setValue('agent', 'mid.server.' + midserver.toLowerCase());
		gr.setValue('topic', 'Command');
		gr.setValue('queue', 'output');
		if (payload.startsWith('<parameters>')) {
			gr.setValue('payload', payload);
		} else {
			gr.setValue('payload', '<parameters><parameter name="name" value="' + payload.replace(/"/g, '\'') + '"/><parameter name="skip_sensor" value="true"/></parameters>');	
		}
		var command_sys_id = gr.insert();
		
		gs.info('MyDesign - Command added to MID Server ECC queue (sys_id = ' + command_sys_id + ')'); 
				
		if (wait_response) {
			var count = 1;
			while (count <= this.attempts) {
				gs.sleep(this.interval);
				gr = new GlideRecord('ecc_queue');
				gr.addEncodedQuery('agent=mid.server.' + midserver.toLowerCase() + '^topic=Command^queue=input^state=ready^response_to=' + command_sys_id);
				gr.query();
				gs.info('Mydesign - Checking ECC Command response - Attempt #' + count + ' (sys_id = ' + command_sys_id + ')');
				if (gr.next()){
					gs.info('Mydesign - ECC Command response found - Attempt #' + count + ' (sys_id = ' + command_sys_id + ')');
					gr.setValue('state', 'processed');
					gr.setValue('processed', gs.nowNoTZ());
					gr.update();
					//TODO Evaluate response
					if (true) {
						return true;
					} else {
						return false;
					}
				}
				count++;
			}
			gs.error('Mydesign - Aborting wait for ECC Command response - ' + this.attempts + ' Attempt(s) (sys_id = ' + command_sys_id + ')');
			return false;
		}
		return true;
	}, 
	
	// Execute javascript on MID Server
	executeJavascriptMIDServer: function(midserver, payload, wait_response) {
		
		gs.info('Mydesign - Execute Javascript MID Server (midserver = ' + midserver + ', wait_response = ' + wait_response + ')');
		
		var gr = new GlideRecord('ecc_queue');
		gr.initialize();
		gr.setValue('agent', 'mid.server.' + midserver.toLowerCase());
		gr.setValue('topic', 'JavascriptProbe');
		gr.setValue('queue', 'output');
		if (payload.startsWith('<parameters>')) {
			gr.setValue('payload', payload);
		} else {
			gr.setValue('payload', '<parameters><parameter name="script" value="' + payload.replace(/"/g, '\'') + '"/><parameter name="skip_sensor" value="true"/></parameters>');	
		}
		var script_sys_id = gr.insert();
		
		gs.info('Mydesign - JavascriptProbe added to MID Server ECC queue (sys_id = ' + script_sys_id + ')'); 
				
		if (wait_response) {
			var count = 1;
			while (count <= this.attempts) {
				gs.sleep(this.interval);
				gr = new GlideRecord('ecc_queue');
				gr.addEncodedQuery('agent=mid.server.' + midserver.toLowerCase() + '^topic=JavascriptProbe^queue=input^state=ready^response_to=' + script_sys_id);
				gr.query();
				gs.info('Mydesign - Checking ECC JavascriptProbe response - Attempt #' + count + ' (sys_id = ' + script_sys_id + ')');
				if (gr.next()){
					gs.info('Mydesign - ECC JavascriptProbe response found - Attempt #' + count + ' (sys_id = ' + script_sys_id + ')');
					gr.setValue('state', 'processed');
					gr.setValue('processed', gs.nowNoTZ());
					gr.update();
					
					var xmlDoc = new XMLDocument2();
					xmlDoc.parseXML(gr.payload.toString());
					var script_result = xmlDoc.getNodeText("//results/result/output");
					
					if (!script_result) {
						script_result = '';
					}
					
					return script_result;
				}
				count++;
			}
			gs.error('Mydesign - Aborting wait for ECC JavascriptProbe response - ' + this.attempts + ' Attempt(s) (sys_id = ' + script_sys_id + ')');
			return false;
		}
		return true;
	},
	
    type: 'MydesignECCUtils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-23 14:57:06</sys_created_on>
        <sys_id>ef207af747656210b183ae4b116d437b</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>MydesignECCUtils</sys_name>
        <sys_package display_value="MyDesign" source="x_492360_mydesign">8d9ca96987c825107653fd57dabb3584</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="MyDesign">8d9ca96987c825107653fd57dabb3584</sys_scope>
        <sys_update_name>sys_script_include_ef207af747656210b183ae4b116d437b</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-23 14:59:14</sys_updated_on>
    </sys_script_include>
    <sys_es_latest_script action="INSERT_OR_UPDATE">
        <id>ef207af747656210b183ae4b116d437b</id>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2025-05-23 14:56:45</sys_created_on>
        <sys_id>fd71beb747656210b183ae4b116d439d</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2025-05-23 14:56:45</sys_updated_on>
        <table>sys_script_include</table>
        <use_es_latest>true</use_es_latest>
    </sys_es_latest_script>
</record_update>
